#! /app/.heroku/node/bin/node

// At the first of each month we reset all NORMAL budgets back to there amount level,
// for RESERVE budget we accumulate the amount over month.
// Each budget is clear from its expenses.
// Expenses are not deleted.

const MongoBudgetRepository = require('../dist/db/mongo/budget/MongoBudgetRespository').default;
const db = require('../dist/db/mongo');

console.log('Connecting database...');
db.connectDb();
console.log('Renew budgets');
renewAllBudgets();

async function renewAllBudgets() {
  budgetRepository = new MongoBudgetRepository(db.budgetModel);
  budgets = await budgetRepository.find(['_id', 'amount', 'available', 'name', 'type']);

  await Promise.all(
    budgets.map(renewBudget)
  );
  db.disconnectDb();
}

async function renewBudget(budget) {
  let availableAmount;

  availableAmount = computeAvailableAmount(budget, availableAmount);
  const patched = await patchBudget(budget._id, availableAmount);

  if (patched) {
    console.log(`Budget ${budget.name}(${budget._id}): expenses cleared`);
  } else {
    // TODO: here accumulate errors and make the script faill if there at least one budget that can not be renewed
    console.err(`Budget ${budget.name}(${budget._id}): expenses clean failed`);
  }
}

function computeAvailableAmount(budget) {
  if (budget.type === 'RESERVE') {
    return budget.available + budget.amount;
  }

  return budget.amount;
}

async function patchBudget(budgetId, available) {
  return await budgetRepository.patch(budgetId, {
    available: available,
    expenses: [],
  });
}
